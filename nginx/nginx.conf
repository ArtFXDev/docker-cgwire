# Defines the number of worker processes. 
worker_processes 1;

events {
    # worker_processes and worker_connections allows you to calculate maxclients value:
    # max_clients = worker_processes * worker_connections
    worker_connections 1024;
}

http {
    # Include default MIME types
    include mime.types;

    # Sets the default MIME type for files that doesn't have one
    default_type  application/octet-stream;

    # By default, NGINX handles file transmission itself and copies the file into the buffer before sending it.
    # Enabling the sendfile directive eliminates the step of copying the data into the buffer and enables direct copying
    # data from one file descriptor to another.
    sendfile on;

    # Timeout during which a keep-alive client connection will stay open.
    keepalive_timeout  65;

    # A server block is a subset of Nginxâ€™s configuration that defines a
    # virtual server used to handle requests of a defined type.

    # Kitsu and Zou api
    server {
        # You would want to make a separate file with its own server block for each virtual domain
        # on your server and then include them.
        listen       80;

        # Lets you doname-based virtual hosting
        server_name  kitsu.prod.silex.artfx.fr;


        location /api {
            # # Identifies the client's IP address. For the Load Balancing service, the "client" is the last remote peer.
            proxy_set_header X-Real-IP $remote_addr;

            # Sets the "Host" header to the $host variable, 
            # which should contain information about the original host being requested. 
            proxy_set_header Host $host;

            # Sets the maximum allowed size of the client request body.
            # If the size in a request exceeds the configured value, the 413 (Request Entity Too Large) error is returned to the client.
            client_max_body_size 1G;

            # Include cors headers
            include /etc/nginx/includes/cors_headers.conf;

            # The proxy_pass directive is mainly found in location contexts,
            # and it sets the protocol and address of a proxied server.
            # When a request matches a location with a proxy_pass directive inside,
            # the request is forwarded to the URL given by the directive. 
            proxy_pass http://zou-app:5000/;
        }

        location /socket.io {
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";

            proxy_pass http://zou-event:5001;
        }

        location / {
            # The root directive specifies the root directory that will be used to search for a file.
            root  /opt/kitsu/dist;

            # include cors headers
            include /etc/nginx/includes/cors_headers.conf;

            # Solves 404 error with SPA routing
            # See: https://stackoverflow.com/questions/45502403/nginx-proxy-pass-and-spa-routing-in-html5-mode
            proxy_intercept_errors on;
            error_page 404 = /index.html;
            
            # Checks the existence of files in the specified order and
            # uses the first found file for request processing.
            # The processing is performed in the current context.
            try_files $uri $uri/ /index.html;
        }

        # Redirect server error pages to the static page /50x.html
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root   html;
        }
    }


    # silex-front React application
    server {
        listen       80;
        server_name  front.prod.silex.artfx.fr;

        location / {
            root    /opt/silex/silex-front;

            proxy_intercept_errors on;
            error_page 404 = /index.html;

            index  index.html index.htm;

            # Use this for Single Page Apps since routing is done on the client side
            try_files $uri /index.html;
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}
